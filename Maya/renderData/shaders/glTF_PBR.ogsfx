//
// This fragment shader defines a reference implementation for Physically Based Shading of
// a microfacet surface material defined by a glTF model.
//
// References:
// [1] Real Shading in Unreal Engine 4
//     http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf
// [2] Physically Based Shading at Disney
//     http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf
// [3] README.md - Environment Maps
//     https://github.com/KhronosGroup/glTF-WebGL-PBR/#environment-maps
// [4] "An Inexpensive BRDF Model for Physically based Rendering" by Christophe Schlick
//     https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf
#define USE_IBL
#define HAS_BASECOLORMAP
#define HAS_NORMALMAP
#define HAS_EMISSIVEMAP
#define HAS_METALROUGHNESSMAP
#define HAS_OCCLUSIONMAP
#define USE_TEX_LOD
#define MANUAL_SRGB
#define SRGB_FAST_APPROXIMATION
#undef USE_LIGHT_BINDING

#define M_PI 3.141592653589793

uniform mat4 u_MVPMatrix : WorldViewProjection;
uniform mat4 u_ModelMatrix : World;
uniform mat4 u_NormalMatrix : WorldInverseTranspose;
uniform mat4 u_CameraMatrix : ViewInverse;

#ifdef USE_LIGHT_BINDING
uniform vec3 u_LightColor : LightColor
<
	string UIName = "Light Color";
	string UIWidget = "ColorPicker";
    string UIGroup = "PBR Light";
	string Object = "directionalLight1";
> = {1.0, 1.0, 1.0};

uniform float u_LightIntensity : LightIntensity
<
	string UIName = "Light Intensity";
    string UIGroup = "PBR Light";
	float UIMin = 0;
	float UISoftMin = 0;
	float UIMax = 10;
	float UISoftMax = 10;
	float UIStep = 0.001;
	string UIWidget = "Slider";
	string Object = "directionalLight1";
> = {1.0};

uniform vec3 u_LightDir : Direction
<
	string UIName = "Light Direction";
	string Space = "World";
    string UIGroup = "PBR Light";
	string Object = "directionalLight1";
> = {0,-1,0};
#else
uniform vec3 u_LightColor
<
	string UIName = "Light Color";
	string UIWidget = "ColorPicker";
    string UIGroup = "PBR Light";
> = {1.0, 1.0, 1.0};

uniform float u_LightIntensity
<
	string UIName = "Light Intensity";
    string UIGroup = "PBR Light";
	float UIMin = 0;
	float UISoftMin = 0;
	float UIMax = 10;
	float UISoftMax = 10;
	float UIStep = 0.001;
	string UIWidget = "Slider";
> = {1.0};

uniform float u_LightRotation
<
	string UIName = "Light rotation (deg)";
    string UIGroup = "PBR Light";
	string UIWidget = "Slider";
	float UIMin = 0;
	float UIMax = 360;
> = 75;

uniform float u_LightPitch
<
	string UIName = "Light pitch (deg)";
    string UIGroup = "PBR Light";
	string UIWidget = "Slider";
	float UIMin = -90;
	float UIMax = 90;
> = 40;
#endif

#ifdef USE_IBL

uniform textureCube u_DiffuseEnvTexture
<
    string UIName = "Diffuse env map (LIN)";
    string ResourceType = "Cube";
    string ResourceName = "../images/damaged_helmet_diffuse_env.dds";
    string UIGroup = "PBR IBL";

    int UIOrder = 2001;
>;

uniform samplerCube u_DiffuseEnvSampler = sampler_state
{
    Texture = <u_DiffuseEnvTexture>;
};

uniform textureCube u_SpecularEnvTexture
<
    string UIName = "Specular env map (LIN)";
    string ResourceType = "Cube";
    string ResourceName = "../images/damaged_helmet_specular_env.dds";
    string UIGroup = "PBR IBL";
    int UIOrder = 2002;
>;

uniform samplerCube u_SpecularEnvSampler = sampler_state
{
    Texture = <u_SpecularEnvTexture>;
};

uniform texture2D u_brdfTexture
<
    string UIName = "BRDF LUT (sRGB)";
    string ResourceType = "2D";
    string ResourceName = "../images/brdfLUT.png";
    string UIGroup = "PBR IBL";
    int UIOrder = 2003;
>;

uniform sampler2D u_brdfLUT = sampler_state
{
    Texture = <u_brdfTexture>;
    TEXTURE_MIN_FILTER = LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
    TEXTURE_WRAP_S = CLAMP_TO_EDGE;
    TEXTURE_WRAP_T = CLAMP_TO_EDGE;
    TEXTURE_WRAP_R = CLAMP_TO_EDGE;
};

#endif

#ifdef HAS_BASECOLORMAP
uniform texture2D u_BaseColorTexture
<
    string UIName = "Base color map (sRGB)";
    string ResourceType = "2D";
	string UIGroup = "PBR Material";
    int UIOrder = 1001;
>;

uniform sampler2D u_BaseColorSampler = sampler_state
{
  Texture = <u_BaseColorTexture>;
};
#endif

#ifdef HAS_NORMALMAP
uniform texture2D u_NormalTexture
<
    string UIName = "Normal map (LIN)";
    string ResourceType = "2D";
    string UIGroup = "PBR Material";
    int UIOrder = 1501;
>;

uniform sampler2D u_NormalSampler = sampler_state
{
  Texture = <u_NormalTexture>;
};

uniform float u_NormalScale
<
    string UIName = "Normal scale";
    string UIGroup = "PBR Material";
    int UIOrder = 1502;
> = 1;
#endif

#ifdef HAS_EMISSIVEMAP

uniform texture2D u_EmissiveTexture
<
    string UIName = "Emissive map (sRGB)";
    string ResourceType = "2D";
	string UIGroup = "PBR Material";
    int UIOrder = 1601;
>;

uniform sampler2D u_EmissiveSampler = sampler_state
{
  Texture = <u_EmissiveTexture>;
};

uniform vec3 u_EmissiveColor
<
    string UIName = "Emissive color factor";
    string UIGroup = "PBR Material";
    string UIWidget = "ColorPicker";
    int UIOrder = 1602;
> = {0,0,0};

#endif

#ifdef HAS_METALROUGHNESSMAP
uniform texture2D u_MetallicTexture
<
    string UIName = "Metallic map (B,LIN)";
    string ResourceType = "2D";
    string UIGroup = "PBR Material";
    int UIOrder = 1201;
>;

uniform sampler2D u_MetallicSampler = sampler_state
{
  Texture = <u_MetallicTexture>;
};

uniform texture2D u_RoughnessTexture
<
    string UIName = "Roughness map (G,LIN)";
    string ResourceType = "2D";
    string UIGroup = "PBR Material";
    int UIOrder = 1203;
>;

uniform sampler2D u_RoughnessSampler = sampler_state
{
  Texture = <u_RoughnessTexture>;
};


#endif

#ifdef HAS_OCCLUSIONMAP
uniform texture2D u_OcclusionTexture
<
    string UIName = "Occlusion map (R,LIN)";
    string ResourceType = "2D";
    string UIGroup = "PBR Material";
    int UIOrder = 1401;
>;
uniform sampler2D u_OcclusionSampler = sampler_state
{
  Texture = <u_OcclusionTexture>;
};

uniform float u_OcclusionStrength
<
    string UIName = "Occlusion strength";
    string UIGroup = "PBR Material";
    int UIOrder = 1402;
> = 1;

#endif

uniform float u_MetallicStrength
<
    string UIName = "Metallic strength";
    string UIGroup = "PBR Material";
    int UIOrder = 1202;
> = 0.5;

uniform float u_RoughnessStrength
<
    string UIName = "Roughness strength";
    string UIGroup = "PBR Material";
    int UIOrder = 1302;
> = 0.5;

uniform vec4 u_BaseColorFactor
<
    string UIName = "Base color factor";
    string UIGroup = "PBR Material";
    string UIWidget = "ColorPicker";
    int UIOrder = 1102;
> = {1.0, 1.0, 1.0, 1.0};

// debugging flags used for shader output of intermediate PBR variables
uniform vec4 u_ScaleDiffBaseMR
<
    string UIName = "Scale Diff Base MR";
    string UIGroup = "PBR Debug";
    int UIOrder = 9001;
> = {0.0, 0.0, 0.0, 0.0};

uniform vec4 u_ScaleFGDSpec
<
    string UIName = "Scale FGD Spec";
    string UIGroup = "PBR Debug";
    int UIOrder = 9002;
> = {0.0, 0.0, 0.0, 0.0};

uniform vec4 u_ScaleIBL_Occl
<
    string UIName = "Scale IBL AO(w)";
    string UIGroup = "PBR Debug";
    string UIWidget = "";
    int UIOrder = 9003;
> = {1.0, 1.0, 0.0, 1.0};

uniform bool u_UseMeshTangents
<
    string UIName = "Use mesh tangents?";
    string UIGroup = "PBR Advanced";
    int UIOrder = 3000;
> = false;


// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
    float NdotL;                  // cos angle between normal and light direction
    float NdotV;                  // cos angle between normal and view direction
    float NdotH;                  // cos angle between normal and half vector
    float LdotH;                  // cos angle between light direction and half vector
    float VdotH;                  // cos angle between view direction and half vector
    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
    float metalness;              // metallic value at the surface
    vec3 reflectance0;            // full reflectance color (normal incidence angle)
    vec3 reflectance90;           // reflectance color at grazing angle
    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
    vec3 diffuseColor;            // color contribution from diffuse lighting
    vec3 specularColor;           // color contribution from specular lighting
};

attribute vs_input
{
    vec4 a_Position : POSITION;
    vec4 a_Normal   : NORMAL;
    vec4 a_Tangent  : TANGENT;
    vec4 a_BiTangent: BINORMAL;
    vec2 a_UV       : TEXCOORD0;
};

attribute vs_to_ps
{
    vec3  v_Position  : POSITION0;
    vec3  v_CameraPos : POSITION1;
    vec2  v_UV        : TEXCOORD0;
    float v_BinormalSign;
    mat3  v_TBN;
#ifndef USE_LIGHT_BINDING
    vec3  v_LightDir;
#endif
};

attribute ps_output
{
  vec4 out_color : COLOR0;
}

GLSLShader VS
{
    vec3 toUnity(vec3 p)
    {
        return p.xzy * vec3(-1, -1, 1);
    }

    void main()
    {
        vec4 pos = u_ModelMatrix * a_Position;
        v_Position = vec3(pos.xyz) / pos.w;
        v_CameraPos = u_CameraMatrix[3].xyz / u_CameraMatrix[3].w;

        vec3 normalW = normalize((u_NormalMatrix * a_Normal).xyz);
        vec3 tangentW = normalize((u_ModelMatrix * a_Tangent).xyz);
        vec3 bitangentW = normalize((u_ModelMatrix * a_BiTangent).xyz);
        //vec3 bitangentW = normalize(cross(normalW, tangentW) * a_Tangent.w);

        v_TBN = mat3(tangentW, bitangentW, normalW);

        v_BinormalSign = a_Tangent.w;

        v_UV = vec2(a_UV.x, 1.0 - a_UV.y);

#ifndef USE_LIGHT_BINDING
        float rot = u_LightRotation * M_PI / 180;
        float pitch = u_LightPitch * M_PI / 180;
        v_LightDir = vec3(sin(rot) * cos(pitch), sin(pitch), cos(rot) * cos(pitch));
#endif
        gl_Position = u_MVPMatrix * a_Position; // needs w for proper perspective correction
    }
}

GLSLShader PS
{
#extension GL_ARB_texture_query_levels : enable

    const float c_MinRoughness = 0.04;

    // In a normal map, (128, 128, 255) means no deviation from the standard normal
    // So (128,128,255) must map to (0,0,1)
    // The GPU will map 0..255 to 0..1, so 128 will map to 128/255
    // To map 128/255 to 0 we multiply by 255/128, and subtract 1.
    // Using the same transform 0 will map to -1, and 255 will map to 0.9921875
    // Normalizing the result fixes this, but 128 will stay 0.
    // Multiplying by 2.0 would give a slight deviation, and that can result in seams when looking up the reflected color mirrored meshes.
	const float c_NormalMapZeroValue = 128.0/255.0;
	const float c_NormalMapZeroScale = 255.0/128.0;

    vec3 colorize(vec3 p)
    {
        return sign(p) * pow(abs(p), vec3(1)) * 0.5 + vec3(0.5);
    }

    vec4 tex2D(sampler2D s, vec2 uv, vec4 defaultColor)
    {
        return textureSize(s, 0).x > 1 ? texture(s, uv) : defaultColor;
    }

    vec4 texCube(samplerCube s, vec3 n, vec4 defaultColor)
    {
        return textureSize(s, 0).x > 1 ? texture(s, n) : defaultColor;
    }

    vec4 texCubeLod(samplerCube s, vec3 n, float lod, vec4 defaultColor)
    {
        return textureSize(s, 0).x > 1 ? textureLod(s, n, lod) : defaultColor;
    }

    vec4 SRGBtoLINEAR(vec4 srgbIn)
    {
#ifdef MANUAL_SRGB
#   ifdef SRGB_FAST_APPROXIMATION
        vec3 linOut = pow(srgbIn.xyz,vec3(2.2));
#   else //SRGB_FAST_APPROXIMATION
        vec3 bLess = step(vec3(0.04045),srgbIn.xyz);
        vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );
#   endif //SRGB_FAST_APPROXIMATION
        return vec4(linOut,srgbIn.w);;
#else //MANUAL_SRGB
        return srgbIn;
#endif //MANUAL_SRGB
    }

    // Find the normal for this fragment, pulling either from a predefined normal map
    // or from the interpolated mesh normal and tangent attributes.
    vec3 getNormal()
    {
        // Retrieve the tangent space matrix
        mat3 tbn = v_TBN;

#ifdef HAS_NORMALMAP
        vec3 n = tex2D(u_NormalSampler, v_UV, vec4(c_NormalMapZeroValue, c_NormalMapZeroValue, 1.0, 1.0)).rgb;

        if (!u_UseMeshTangents) {
            // Recompute TBN in shader.
            // Useful when normal-maps are not baked in Maya, to get correct results.
            vec3 pos_dx = dFdx(v_Position);
            vec3 pos_dy = dFdy(v_Position);
            vec3 tex_dx = dFdx(vec3(v_UV, 0.0));
            vec3 tex_dy = dFdy(vec3(v_UV, 0.0));
            vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);

            vec3 ng = tbn[2];
            t = normalize(t - ng * dot(ng, t));
            vec3 b = normalize(cross(ng, t)) * v_BinormalSign;
            tbn = mat3(t, b, ng);
        }

        n = normalize(tbn * ((c_NormalMapZeroScale * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));
#else
        vec3 n = normalize(tbn[2].xyz);
#endif

        return n;
    }

    // Calculation of the lighting contribution from an optional Image Based Light source.
    // Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
    // See our README.md on Environment Maps [3] for additional discussion.
    vec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)
    {
#ifdef USE_IBL
        float mipMax = textureQueryLevels(u_SpecularEnvSampler) - 1;
        float lod = pbrInputs.perceptualRoughness * mipMax;
        // retrieve a scale and bias to F0. See [1], Figure 3
        vec3 brdf = SRGBtoLINEAR(tex2D(u_brdfLUT, vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness), vec4(0))).rgb;
        vec3 diffuseLight = (texCube(u_DiffuseEnvSampler, n, vec4(0))).rgb;
        vec3 specularLight = (texCubeLod(u_SpecularEnvSampler, reflection, lod, vec4(0))).rgb;

        vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;
        vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);

        // For presentation, this allows us to disable IBL terms
        diffuse *= u_ScaleIBL_Occl.x;
        specular *= u_ScaleIBL_Occl.y;

        return diffuse + specular;
#else
        return vec3(0);
#endif
    }

    // Basic Lambertian diffuse
    // Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
    // See also [1], Equation 1
    vec3 diffuse(PBRInfo pbrInputs)
    {
        return pbrInputs.diffuseColor / M_PI;
    }

    // The following equation models the Fresnel reflectance term of the spec equation (aka F())
    // Implementation of fresnel from [4], Equation 15
    vec3 specularReflection(PBRInfo pbrInputs)
    {
        return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
    }

    // This calculates the specular geometric attenuation (aka G()),
    // where rougher material will reflect less light back to the viewer.
    // This implementation is based on [1] Equation 4, and we adopt their modifications to
    // alphaRoughness as input as originally proposed in [2].
    float geometricOcclusion(PBRInfo pbrInputs)
    {
        float NdotL = pbrInputs.NdotL;
        float NdotV = pbrInputs.NdotV;
        float r = pbrInputs.alphaRoughness;

        float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
        float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
        return attenuationL * attenuationV;
    }

    // The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
    // Implementation from "Average Irregularity Representation of a Roughened Surface for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
    // Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
    float microfacetDistribution(PBRInfo pbrInputs)
    {
        float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
        float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
        return roughnessSq / (M_PI * f * f);
    }

    void main()
    {
        // Metallic and Roughness material properties are packed together
        // In glTF, these factors can be specified by fixed scalar values
        // or from a metallic-roughness map
        float perceptualRoughness = u_RoughnessStrength;
        float metallic = u_MetallicStrength;

#ifdef HAS_METALROUGHNESSMAP
        // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
        // This layout intentionally reserves the 'r' channel for (optional) occlusion map data
        perceptualRoughness = tex2D(u_RoughnessSampler, v_UV, vec4(1)).g * perceptualRoughness;
        metallic = tex2D(u_MetallicSampler, v_UV, vec4(1)).b * metallic;
#endif
        perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
        metallic = clamp(metallic, 0.0, 1.0);
        // Roughness is authored as perceptual roughness; as is convention,
        // convert to material roughness by squaring the perceptual roughness [2].
        float alphaRoughness = perceptualRoughness * perceptualRoughness;

        // The albedo may be defined from a base texture or a flat color
#ifdef HAS_BASECOLORMAP
        vec4 baseColor = SRGBtoLINEAR(tex2D(u_BaseColorSampler, v_UV, vec4(1))) * u_BaseColorFactor;
#else
        vec4 baseColor = u_BaseColorFactor;
#endif

        vec3 f0 = vec3(0.04);
        vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
        diffuseColor *= 1.0 - metallic;
        vec3 specularColor = mix(f0, baseColor.rgb, metallic);

        // Compute reflectance.
        float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

        // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
        // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
        float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
        vec3 specularEnvironmentR0 = specularColor.rgb;
        vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

        vec3 n = getNormal();                             // normal at surface point
        vec3 v = normalize(v_CameraPos - v_Position);        // Vector from surface point to camera
#ifdef USE_LIGHT_BINDING
        // Vector from surface point to light
        vec3 l = normalize(-u_LightDir);
#else
        vec3 l = normalize(v_LightDir);
#endif
        vec3 h = normalize(l+v);                          // Half vector between both l and v
        vec3 reflection = normalize(-reflect(v, n));

        float NdotL = clamp(dot(n, l), 0.001, 1.0);
        float NdotV = abs(dot(n, v)) + 0.001;
        float NdotH = clamp(dot(n, h), 0.0, 1.0);
        float LdotH = clamp(dot(l, h), 0.0, 1.0);
        float VdotH = clamp(dot(v, h), 0.0, 1.0);

        PBRInfo pbrInputs = PBRInfo(
            NdotL,
            NdotV,
            NdotH,
            LdotH,
            VdotH,
            perceptualRoughness,
            metallic,
            specularEnvironmentR0,
            specularEnvironmentR90,
            alphaRoughness,
            diffuseColor,
            specularColor
        );

        // Calculate the shading terms for the microfacet specular shading model
        vec3 F = specularReflection(pbrInputs);
        float G = geometricOcclusion(pbrInputs);
        float D = microfacetDistribution(pbrInputs);

        // Calculation of analytical lighting contribution
        vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);
        vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);
        vec3 color = NdotL * u_LightColor * u_LightIntensity * (diffuseContrib + specContrib);

        // Calculate lighting contribution from image based lighting source (IBL)
#ifdef USE_IBL
        color += getIBLContribution(pbrInputs, n, reflection);
#endif

        // Apply optional PBR terms for additional (optional) shading
#ifdef HAS_OCCLUSIONMAP
        float ao = tex2D(u_OcclusionSampler, v_UV, vec4(1)).r;
        color = mix(color, color * ao, u_OcclusionStrength * u_ScaleIBL_Occl.w);
#endif

#ifdef HAS_EMISSIVEMAP
        vec3 emissive = SRGBtoLINEAR(tex2D(u_EmissiveSampler, v_UV, vec4(1))).rgb * u_EmissiveColor.rgb;
        color += emissive;
#endif

        // This section uses mix to override final color for reference app visualization
        // of various parameters in the lighting equation.
        color = mix(color, F, u_ScaleFGDSpec.x);
        color = mix(color, vec3(G), u_ScaleFGDSpec.y);
        color = mix(color, vec3(D), u_ScaleFGDSpec.z);
        color = mix(color, specContrib, u_ScaleFGDSpec.w);

        color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);
        color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);
        color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);
        color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);

        //out_color = vec4(pow(color,vec3(1.0/2.2)), baseColor.a);
        out_color = vec4(color, baseColor.a);
        //out_color = vec4(n, baseColor.a);
    }
}

technique Solid
{
  pass p0
  {
    VertexShader (in vs_input, out vs_to_ps) = VS;
    PixelShader (in vs_to_ps, out ps_output) = PS;
  }
}

technique Transparent
<
    string Transparency = "Transparent";
>
{
    pass p0
    {
        VertexShader (in vs_input, out vs_to_ps) = VS;
        PixelShader (in vs_to_ps, out ps_output) = PS;
    }
}
